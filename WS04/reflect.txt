*****************************************************************************
 <assessment name example: Workshop - #4 (Part-1)>
Full Name : Pruthvi Patel
Student ID#: 170733216
Email : ppatel450@myseneca.ca
Section : NHH
Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1. Why do you think selection is an extremely important concept in programming? Provide three (3) examples 
from your program (Part-2) where you use it and how it influenced your solution.
Ans: While coding any data in any programming language, there can always be more than one possibility of any situation, and there's where selection comes into the picture. Selection prints the output according to the condition. There are different statements like IF and ELSE by which one can perform this structure. Computer runs the code block under the IF statement if a given condition is true or else it runs the code block or sequence under the ELSE statement if non of the above mentioned conditions are true. Thus, it is a very important concept in programming as it is the backbone of decision making concept in coding. Examples of selection from part 2 workshop 4:

Example1)
if (num_apples < 0)
            {
                printf("ERROR: Value must be 0 or more.\n");

            }
The above piece of code showed the Error message if the number of selected apples were less than 0 as selected apples cannot be in negative. The code didn't show the error message after slecting appropriate number of apples that were more than 0.

Example 2)

                        if (num_apples == 0)
                        {
                            printf("Great, that's the apples done!\n");
                        }

                        else
                        {
                            printf("Looks like we still need some APPLES...\n");

                        }
In this one, if the number of apples left to pick were equal to 0 then the code will run the code block under IF  or else it will run the code block under ELSE.

Example 3) 
 if (num_oranges < 0)
            {
                printf("ERROR: Value must be 0 or more.\n");

            }
Similar to example 1,the code will show the Error message that is in the print statement or else it will move to the next command after the curly braces that is after the code block under IF.

2.What is a nested construct? Identify two (2) different examples from your program (Part-2) where you applied this and describe how the logic is executed in language a non-technical person would understand.
Ans: A nested construct is defined to insert one condition or loop under another condition or loop, that is we can have another IF or ELSE statement under an IF or ELSE statement which is known as nested selections and also a loop under another loop that is an iteartion under another iteration is known as nested iteration.

Example 1) 
 if (num_apples > 0) {
                do
                {
                
                    printf("Pick some APPLES... how many did you pick? : ");
                    scanf("%d", &num_apples_picked);
                    if (num_apples_picked > num_apples)
                    {
                        printf("You picked too many... only %d more APPLE(S) are needed.\n", num_apples);
                    }

                    else if (num_apples_picked <= 0)
                    {
                        printf("ERROR: You must pick at least 1!\n");

                    }

                    else
                    {
                        num_apples -= num_apples_picked;

                        if (num_apples == 0)
                        {
                            printf("Great, that's the apples done!\n");
                        }

                        else
                        {
                            printf("Looks like we still need some APPLES...\n");

                        }

                    }

                } while (num_apples > 0);
                printf("\n");
            
        }

Example 2)
if (num_oranges > 0)
        {
            do
            {
                printf("Pick some ORANGES... how many did you pick? : ");
                scanf("%d", &num_oranges_picked);
                if (num_oranges_picked > num_oranges)
                {
                    printf("You picked too many... only %d more ORANGE(S) are needed.\n", num_oranges);
                }

                else if (num_oranges_picked <= 0)
                {
                    printf("ERROR: You must pick at least 1!\n");

                }

                else
                {
                    num_oranges -= num_oranges_picked;

                    if (num_oranges == 0)
                    {
                        printf("Great, that's the oranges done!\n");
                    }

                    else
                    {
                        printf("Looks like we still need some ORANGES...\n");

                    }

                }
The above mentioned examples are two of the total nested constructs that I used in my code part 2. The logic is simple, talking about the first example, the very first condition says that the code will run only if the number of apples selected by the customer are above 0, if not, then it will directly go to the next condition without printing anything inside that IF statement. If they are above 0, then the code will ask user that is the customer to pick the number of apples, if the number of apples selected by the user are same as the number of apples picked, then the code will stop asking the customer to enter the number of apples picked. But if the number of apples picked is greater than the number of apples selected then the output will display that the amount is more than it should be. Next, if the number of apples picked are less than 0 or equal to 0 then the output will display a message saying that the number should at least be 1. The last condition will be displayed if the number of apples picked are neither more than the number of apples selected nor less than or equal to 0. This condition will keep on decreasing the number of apples left to pick as the customer is picking the apples and at the point where customer is done picking up all the apples and the number of apples left to be picked are 0, then  the shopping for apples part will be over and the code will move to the next condition. But if the number of apples picked are less than the number of apples then the output will display a message saying the customer to pick more apples in order to complete the pick up. The second example of oranges follow the same logic.

3.What is your favourite iteration construct and why? Compare your favourite to each of the other possible 
iteration constructs to backup your reasons. In addition, provide a concrete example from your solution for 
Part-2.
Ans. First of all, there are three types of iteration constructs, while,do-while and for. All the three loops have the same roles but the method of performing the roles is different for each construct. My personal favourite iteration construct is the do-while construct. This is because the do-while construct is more like a non technical and easy to understand method of looping sequences, it's like do this..., while this....,which makes it easy for the reader to understand about the specific condition in which the loop will keep doing or run the sequence. It takes the form:
1) do{
      sequence
}while (condition);

2) Second iteration construct:
while (condition)
{
sequence

}

3) Third iteration construct:
for(initialization;condition;change)
{
sequence
}

In the other 2 iteration constructs, the condition is mentioned before the code has begun which often confuses the reader and making it difficult to figure out the output of the code.
The example of do while being used in my workshop code part2 has been illustrated below:

            do
            {
                printf("Pick some TOMATOES... how many did you pick? : ");
                scanf("%d", &num_tomatoes_picked);
                if (num_tomatoes_picked > num_tomatoes)
                {
                    printf("You picked too many... only %d more TOMATOE(S) are needed.\n", num_tomatoes);
                }

                else if (num_tomatoes_picked <= 0)
                {
                    printf("ERROR: You must pick at least 1!\n");

                }

                else
                {
                    num_tomatoes -= num_tomatoes_picked;

                    if (num_tomatoes == 0)
                    {
                        printf("Great, that's the tomatoes done!\n");
                    }

                    else
                    {
                        printf("Looks like we still need some TOMATOES...\n");

                    }

                }

            } while (num_tomatoes > 0);





